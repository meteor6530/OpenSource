<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BusinessObjects</name>
    </assembly>
    <members>
        <member name="T:DoFactory.BusinessLayer.BusinessObjects.ProxyList`1">
            <summary>
            ProxyList represents a generic list that is loaded from the database. 
            It implements a pattern called lazy loading (also called just-in-time loading).  
            Lazy loading is a way to control how and when a list is loaded with the goal 
            to load it only when it's absolutely necessary. This way the class prevent the 
            application from executing unneccessary database hits. It's a way to better 
            manage limited resources.
            
            ProxyList is used in the Customer business object to hold a reference to the list of Orders. 
            See ProxyForOrderDetails in the Facade layer.
            
            ProxyList is also used in the Order business objec to hold a reference to the list of Order Details. 
            See ProxyForOrders in the Facade layer.
            
            GoF Design Patterns: Proxy.
            Enterprise Design Patterns: Lazyload.
            </summary>
            <remarks>
            This class is a Proxy because it 'stands in' for a limited resource.
            This class is a Lazy-loader because it does not load when constructed.
            </remarks>
            <typeparam name="T">Generic type stored in the list.</typeparam>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.ProxyList`1.#ctor">
            <summary>
            Default constructor for ProxyList abstract class.
            </summary>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.ProxyList`1.#ctor(System.Object)">
            <summary>
            Overloaded constructor for ProxyList abstract class.
            </summary>
            <param name="parent">Parent (or owner) of the ProxyList.</param>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.ProxyList`1.#ctor(System.Object,System.Collections.Generic.IList{`0})">
            <summary>
            Overloaded constructor for ProxyList abstract class.
            </summary>
            <param name="parent">Parent (or owner) of the ProxyList.</param>
            <param name="list">List being proxied.</param>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.ProxyList`1.LoadList">
            <summary>
            Loads the specific list. To be implemented in derived class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.ProxyList`1.LazyLoad">
            <summary>
            Lazy-loads the list. First checks if the list is already loaded.
            </summary>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.ProxyList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the list.
            </summary>
            <remarks>
            Before the operation starts it checks whether list is already loaded.
            If not, it first lazy-loads the list.
            </remarks>
            <param name="item">Item for which index is requested.</param>
            <returns>Index of the item in the list.</returns>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.ProxyList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at the given index in the list.
            </summary>
            <remarks>
            Before the operation starts it checks whether list is loaded.
            If not, it first lazy-loads it.
            </remarks>
            <param name="index">Index at which item is inserted.</param>
            <param name="item">Item being inserted.</param>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.ProxyList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the list item at the specified index.
            </summary>
            <remarks>
            Before the operation starts it checks whether list is loaded.
            If not, it first lazy-loads it.
            </remarks>
            <param name="index">Index position.</param>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.ProxyList`1.Add(`0)">
            <summary>
            Adds an item to the list.
            <remarks>
            Before the operation starts it checks whether list is loaded.
            If not, it first lazy-loads it.
            </remarks>
            </summary>
            <param name="item">Item to be added</param>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.ProxyList`1.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.ProxyList`1.Contains(`0)">
            <summary>
            Determines whether the list contains a specific item.
            </summary>
            <remarks>
            Before the operation starts it checks whether list is loaded.
            If not, it first lazy-loads it.
            </remarks>
            <param name="item">Item being looked for.</param>
            <returns>Value indicating whether item is present in list.</returns>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.ProxyList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the element of list into an array starting at a given index.
            </summary>
            <remarks>
            Before the operation starts it checks whether list is loaded.
            If not, it first lazy-loads it.
            </remarks>
            <param name="array">Generic array being copied into.</param>
            <param name="arrayIndex">Start index from which to copy.</param>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.ProxyList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific item in the list.
            </summary>
            <remarks>
            Before the operation starts it checks whether list is loaded.
            If not, it first lazy-loads it.
            </remarks>
            <param name="item">Item being searched for.</param>
            <returns>Value indicating whether item was removed.</returns>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.ProxyList`1.GetEnumerator">
            <summary>
            Returns a generic enumerator that iterates over the list.
            </summary>
            <remarks>
            Before the operation starts it checks whether list is loaded.
            If not, it first lazy-loads it.
            </remarks>
            <returns>Requested generic enumerator.</returns>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.ProxyList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates over the list.
            </summary>
            <remarks>
            Before the operation starts it checks whether list is loaded.
            If not, it first lazy-loads it.
            </remarks>
            <returns>Requested enumerator.</returns>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.ProxyList`1.List">
            <summary>
            Gets or sets the types list or types being proxied.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.ProxyList`1.Parent">
            <summary>
            Gets or sets the parent class (i.e. the owner) or the ProxyList.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.ProxyList`1.Item(System.Int32)">
            <summary>
            Indexer into list. Get or set item at given index.
            </summary>
            <remarks>
            Before the operation starts it checks whether list is loaded.
            If not, it first lazy-loads it.
            </remarks>
            <param name="index">Index at which item is located.</param>
            <returns>Type at index location.</returns>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.ProxyList`1.Count">
            <summary>
            Gets the number of elements in the list.
            </summary>
            <remarks>
            Before the operation starts it checks whether list is loaded.
            If not, it first lazy-loads it.
            </remarks>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.ProxyList`1.IsReadOnly">
            <summary>
            Gets the value indicating whether the list is read-only.
            </summary>
            <remarks>
            Before the operation starts it checks whether list is loaded.
            If not, it first lazy-loads it.
            </remarks>
        </member>
        <member name="T:DoFactory.BusinessLayer.BusinessObjects.Category">
            <summary>
            Class that holds information about a product category.
            
            Enterprise Design Pattern: Domain Model, Identity Field.
            </summary>
            <remarks>
            This is where your business logic resides. In this example there are none.
            Another place for business logic and business rules is in the Facade.  
            For an example see CustomerFacade in the Facade layer.
            
            The Domain Model Design Pattern states that domain objects incorporate 
            both behavior and data. Behavior may include simple or complex business logic.
            
            The Identity Field Design Pattern saves the ID field in an object to maintain
            identity between an in-memory business object and that database rows.
            </remarks>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.Category.#ctor">
            <summary>
            Default constructor for Category class.
            </summary>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.Category.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Overloaded constructor for Category class.
            </summary>
            <param name="categoryId">Unique Identifier for the Category.</param>
            <param name="name">Name of the Category.</param>
            <param name="description">Description of the Category.</param>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Category.CategoryId">
            <summary>
            Gets or sets unique category identifier.
            The Identity Field Design Pattern. 
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Category.Name">
            <summary>
            Gets or sets the category name.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Category.Description">
            <summary>
            Gets or sets the category description.
            </summary>
        </member>
        <member name="T:DoFactory.BusinessLayer.BusinessObjects.Customer">
            <summary>
            Class that holds information about a customer.
            
            Enterprise Design Pattern: Domain Model, Identity Field.
            </summary>
            <remarks>
            This is where your business logic resides. In this example there are none.
            Another place for business logic and business rules is in the Facade.  
            For an example see CustomerFacade in the Facade layer.
            
            The Domain Model Design Pattern states that domain objects incorporate 
            both behavior and data. Behavior may include simple or complex business logic.
            
            The Identity Field Design Pattern saves the ID field in an object to maintain
            identity between an in-memory business object and that database rows.
            </remarks>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.Customer.#ctor">
            <summary>
            Default constructor for customer class.
            </summary>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.Customer.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            Overloaded constructor for the Customer class.
            </summary>
            <param name="customerId">Unique Identifier for the Customer.</param>
            <param name="company">Name of the Customer.</param>
            <param name="city">City where Customer is located.</param>
            <param name="country">Country where Customer is located.</param>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Customer.CustomerId">
            <summary>
            Gets or sets unique customer identifier.
            The Identity Field Design Pattern. 
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Customer.Company">
            <summary>
            Gets or sets the customer name.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Customer.City">
            <summary>
            Gets or sets the customer city.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Customer.Country">
            <summary>
            Gets or sets the customer country.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Customer.NumOrders">
            <summary>
            Gets or sets the total number of orders placed by the customer.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Customer.LastOrderDate">
            <summary>
            Gets or sets the last date the customer placed an order.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Customer.Orders">
            <summary>
            Gets or sets a list of all orders placed by the customer.
            </summary>
        </member>
        <member name="T:DoFactory.BusinessLayer.BusinessObjects.Order">
            <summary>
            Class that holds information about an order.
            
            Enterprise Design Pattern: Domain Model, Identity Field, Foreign Key Mapping.
            </summary>
            <remarks>
            This is where your business logic resides. In this example there are none.
            Another place for business logic is in the Facade.  
            For an example see CustomerFacade in the Facade layer.
            
            The Domain Model Design Pattern states that domain objects incorporate 
            both behavior and data. Behavior may include simple or complex business logic.
            
            The Identity Field Design Pattern saves the ID field in an object to maintain
            identity between an in-memory business object and that database rows.
            
            The Foreign Key Mapping Design Pattern is implemented by the Order to Customer 
            reference. The pattern states that it maps an association between objects to 
            a foreign key reference between table. The CustomerId is the foreign key to the 
            Order. 
            </remarks>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.Order.#ctor">
            <summary>
            Default constructor for order class.
            </summary>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.Order.#ctor(System.Int32,System.DateTime,System.DateTime,System.Single)">
            <summary>
            Overloaded constructor for the order class.
            </summary>
            <param name="orderId">Unique identifier for the Order</param>
            <param name="orderDate">Date at which Order is placed.</param>
            <param name="requiredDate">Date at which Order is required.</param>
            <param name="freight">Freight (shipping) costs for the Order.</param>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Order.OrderId">
            <summary>
            Gets or sets unique identifier for the order.
            The Identity Field Design Pattern. 
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Order.OrderDate">
            <summary>
            Gets or sets the date at which the order is placed.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Order.RequiredDate">
            <summary>
            Gets or sets the date at which delivery of the order is required.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Order.Freight">
            <summary>
            Gets or sets the freight (shipping) costs for this order.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Order.Customer">
            <summary>
            Gets or sets the customer associated with the order.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Order.CustomerName">
            <summary>
            Gets the customer name associated with the order.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Order.OrderDetails">
            <summary>
            Gets or sets a list of order details (line items) for the order.
            </summary>
        </member>
        <member name="T:DoFactory.BusinessLayer.BusinessObjects.OrderDetail">
            <summary>
            Class that holds order details (line items) for an order.
            
            Enterprise Design Pattern: Domain Model.
            </summary>
            <remarks>
            This is where your business logic resides. In this example there are none.
            Another place for business logic and business rules is in the Facade.  
            For an example see CustomerFacade in the Facade layer.
            
            The Domain Model Design Pattern states that domain objects incorporate 
            both behavior and data. Behavior may include simple or complex business logic.
            </remarks>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.OrderDetail.#ctor">
            <summary>
            Default constructor for Order Detail.
            </summary>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.OrderDetail.#ctor(System.String,System.Int32,System.Single,System.Single,DoFactory.BusinessLayer.BusinessObjects.Order)">
            <summary>
            Overloaded  constructor for Order Detail.
            </summary>
            <param name="product">Product name of Order Detail.</param>
            <param name="quantity">Quantity ordered.</param>
            <param name="unitPrice">Unit price of product at the time order is placed.</param>
            <param name="discount">Discount applied to unit price of product.</param>
            <param name="order">Order that Order Detail is part of.</param>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.OrderDetail.Product">
            <summary>
            Get or set Product name of Order Detail (line item).
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.OrderDetail.Quantity">
            <summary>
            Get or set quantity of Products ordered.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.OrderDetail.UnitPrice">
            <summary>
            Get or set unit price of Product in US$.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.OrderDetail.Discount">
            <summary>
            Get or set discount applied to unit price.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.OrderDetail.Order">
            <summary>
            Get or set the Order of which Order Detail is part of.
            </summary>
        </member>
        <member name="T:DoFactory.BusinessLayer.BusinessObjects.Product">
            <summary>
            Class that holds product information.
            
            Enterprise Design Pattern: Domain Model, Identity Field.
            </summary>
            <remarks>
            This is where your business logic resides. In this example there are none.
            Another place for business logic and business rules is in the Facade.  
            For an example see CustomerFacade in the Facade layer.
            
            The Domain Model Design Pattern states that domain objects incorporate 
            both behavior and data. Behavior may include simple or complex business logic.
            
            The Identity Field Design Pattern saves the ID field in an object to maintain
            identity between an in-memory business object and that database rows.
            </remarks>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.Product.#ctor">
            <summary>
            Default constructor for product.
            </summary>
        </member>
        <member name="M:DoFactory.BusinessLayer.BusinessObjects.Product.#ctor(System.Int32,System.String,System.String,System.Double,System.Int32)">
            <summary>
            Overloaded constructor for product
            </summary>
            <param name="productId">Unique identifier for Product</param>
            <param name="productName">Name of Product.</param>
            <param name="weight">Weight of Product.</param>
            <param name="unitPrice">Unit price of Product in US$.</param>
            <param name="unitsInStock">Product units in stock.</param>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Product.ProductId">
            <summary>
            Gets or sets the unique identifier for the product.
            The Identity Field Design Pattern. 
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Product.ProductName">
            <summary>
            Getd or sets the product name.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Product.Weight">
            <summary>
            Gets or sets the weight of the product.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Product.UnitPrice">
            <summary>
            Gets or sets the unit price of the product in US$.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Product.UnitsInStock">
            <summary>
            Gets or sets units in stock for the product.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Product.Category">
            <summary>
            Gets or sets the product category under which product is categorized.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.BusinessObjects.Product.CategoryName">
            <summary>
            Gets category name under which product is categorized.
            </summary>
        </member>
    </members>
</doc>
