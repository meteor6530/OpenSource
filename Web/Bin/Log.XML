<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Log</name>
    </assembly>
    <members>
        <member name="T:DoFactory.Framework.Log.ILog">
            <summary>
            Defines a single method to write requested log events to an output device.
            </summary>
        </member>
        <member name="M:DoFactory.Framework.Log.ILog.Log(System.Object,DoFactory.Framework.Log.LogEventArgs)">
            <summary>
            Write a log request to a given output device.
            </summary>
            <param name="sender">Sender of the log request.</param>
            <param name="e">Parameters of the log request.</param>
        </member>
        <member name="T:DoFactory.Framework.Log.LogEventArgs">
            <summary>
            Contains log specific event data for log request events.
            </summary>
        </member>
        <member name="M:DoFactory.Framework.Log.LogEventArgs.#ctor(DoFactory.Framework.Log.LogSeverity,System.String,System.Exception,System.DateTime)">
            <summary>
            Constructor of LogEventArgs.
            </summary>
            <param name="severity">Log severity.</param>
            <param name="message">Log message</param>
            <param name="exception">Inner exception.</param>
            <param name="date">Log date.</param>
        </member>
        <member name="M:DoFactory.Framework.Log.LogEventArgs.ToString">
            <summary>
            LogEventArgs as a string represenation.
            </summary>
            <returns>String representation of the LogEventArgs.</returns>
        </member>
        <member name="P:DoFactory.Framework.Log.LogEventArgs.Severity">
            <summary>
            Gets and sets the log severity.
            </summary>        
        </member>
        <member name="P:DoFactory.Framework.Log.LogEventArgs.Message">
            <summary>
            Gets and sets the log message.
            </summary>        
        </member>
        <member name="P:DoFactory.Framework.Log.LogEventArgs.Exception">
            <summary>
            Gets and sets the optional inner exception.
            </summary>        
        </member>
        <member name="P:DoFactory.Framework.Log.LogEventArgs.Date">
            <summary>
            Gets and sets the log date and time.
            </summary>        
        </member>
        <member name="P:DoFactory.Framework.Log.LogEventArgs.SeverityString">
            <summary>
            Friendly string that represents the severity.
            </summary>
        </member>
        <member name="T:DoFactory.Framework.Log.LogSeverity">
            <summary>
            Enumeration of log severity levels.
            </summary>
        </member>
        <member name="F:DoFactory.Framework.Log.LogSeverity.Debug">
            <summary>
            Severity level of "Debug"
            </summary>
        </member>
        <member name="F:DoFactory.Framework.Log.LogSeverity.Info">
            <summary>
            Severity level of "Info"
            </summary>
        </member>
        <member name="F:DoFactory.Framework.Log.LogSeverity.Warning">
            <summary>
            Severity level of "Warning"
            </summary>
        </member>
        <member name="F:DoFactory.Framework.Log.LogSeverity.Error">
            <summary>
            Severity level of "Error"
            </summary>
        </member>
        <member name="F:DoFactory.Framework.Log.LogSeverity.Fatal">
            <summary>
            Severity level of "Fatal"
            </summary>
        </member>
        <member name="T:DoFactory.Framework.Log.ObserverLogToDatabase">
            <summary>
            Class that writes log events to a database.
            
            GoF Design Pattern: Observer.
            </summary>
            <remarks>
            The Observer Design Pattern allows this class to attach itself to an
            the logger and 'listen' to certain events and be notified of the event. 
            </remarks>
        </member>
        <member name="M:DoFactory.Framework.Log.ObserverLogToDatabase.Log(System.Object,DoFactory.Framework.Log.LogEventArgs)">
            <summary>
            Writes a log request to the database.
            </summary>
            <remarks>
            Actual database insert statements are commented out.
            You can activate this if you have the proper database 
            configuration and access privileges.
            </remarks>
            <param name="sender">Sender of the log request.</param>
            <param name="e">Parameters of the log request.</param>
        </member>
        <member name="T:DoFactory.Framework.Log.ObserverLogToEmail">
            <summary>
            Class that sends log events via email.
            
            GoF Design Pattern: Observer.
            </summary>
            <remarks>
            The Observer Design Pattern allows this class to attach itself to an
            the logger and 'listen' to certain events and be notified of the event. 
            </remarks>
        </member>
        <member name="M:DoFactory.Framework.Log.ObserverLogToEmail.#ctor(System.String,System.String,System.String,System.Net.Mail.SmtpClient)">
            <summary>
            Constructor for the ObserverlogToEmail class
            </summary>
            <param name="from">From email address.</param>
            <param name="to">To email address.</param>
            <param name="subject">Email subject.</param>
            <param name="smtpClient">Smtp email client.</param>
        </member>
        <member name="M:DoFactory.Framework.Log.ObserverLogToEmail.Log(System.Object,DoFactory.Framework.Log.LogEventArgs)">
            <summary>
            Sends a log request via email.
            </summary>
            <remarks>
            Actual email 'Send' calls are commented out.
            Uncomment if you have the proper email privileges.
            </remarks>
            <param name="sender">Sender of the log request.</param>
            <param name="e">Parameters of the log request.</param>
        </member>
        <member name="T:DoFactory.Framework.Log.ObserverLogToEventlog">
            <summary>
            Class that writes log events to the event log.
            
            GoF Design Pattern: Observer.
            </summary>
            <remarks>
            The Observer Design Pattern allows this class to attach itself to an
            the logger and 'listen' to certain events and be notified of the event. 
            </remarks>
        </member>
        <member name="M:DoFactory.Framework.Log.ObserverLogToEventlog.Log(System.Object,DoFactory.Framework.Log.LogEventArgs)">
            <summary>
            Write a log request to the event log.
            </summary>
            <remarks>
            Actual event log write entry statements are commented out.
            Uncomment if you have the proper privileges.
            </remarks>
            <param name="sender">Sender of the log request.</param>
            <param name="e">Parameters of the log request.</param>
        </member>
        <member name="T:DoFactory.Framework.Log.ObserverLogToFile">
            <summary>
            Class that writes log events to a local file.
            
            GoF Design Pattern: Observer.
            </summary>
            <remarks>
            The Observer Design Pattern allows this class to attach itself to an
            the logger and 'listen' to certain events and be notified of the event. 
            </remarks>
        </member>
        <member name="M:DoFactory.Framework.Log.ObserverLogToFile.#ctor(System.String)">
            <summary>
            Constructor of ObserverLogToFile.
            </summary>
            <param name="fileName">File log to.</param>
        </member>
        <member name="M:DoFactory.Framework.Log.ObserverLogToFile.Log(System.Object,DoFactory.Framework.Log.LogEventArgs)">
            <summary>
            Write a log request to a file.
            </summary>
            <param name="sender">Sender of the log request.</param>
            <param name="e">Parameters of the log request.</param>
        </member>
        <member name="T:DoFactory.Framework.Log.SingletonLogger">
            <summary>
            Singleton logger class through which all log events are processed.
            
            GoF Design Patterns: Singleton, Observer.
            </summary>
        </member>
        <member name="F:DoFactory.Framework.Log.SingletonLogger.instance">
            <summary>
            The one and only Singleton Logger instance. 
            </summary>
        </member>
        <member name="M:DoFactory.Framework.Log.SingletonLogger.#ctor">
            <summary>
            Private constructor. Initializes default severity to "Error".
            </summary>
        </member>
        <member name="M:DoFactory.Framework.Log.SingletonLogger.Debug(System.String)">
            <summary>
            Log a message when severity level is "Debug" or higher.
            </summary>
            <param name="message">Log message</param>
        </member>
        <member name="M:DoFactory.Framework.Log.SingletonLogger.Debug(System.String,System.Exception)">
            <summary>
            Log a message when severity level is "Debug" or higher.
            </summary>
            <param name="message">Log message.</param>
            <param name="exception">Inner exception.</param>
        </member>
        <member name="M:DoFactory.Framework.Log.SingletonLogger.Info(System.String)">
            <summary>
            Log a message when severity level is "Info" or higher.
            </summary>
            <param name="message">Log message</param>
        </member>
        <member name="M:DoFactory.Framework.Log.SingletonLogger.Info(System.String,System.Exception)">
            <summary>
            Log a message when severity level is "Info" or higher.
            </summary>
            <param name="message">Log message.</param>
            <param name="exception">Inner exception.</param>
        </member>
        <member name="M:DoFactory.Framework.Log.SingletonLogger.Warning(System.String)">
            <summary>
            Log a message when severity level is "Warning" or higher.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:DoFactory.Framework.Log.SingletonLogger.Warning(System.String,System.Exception)">
            <summary>
            Log a message when severity level is "Warning" or higher.
            </summary>
            <param name="message">Log message.</param>
            <param name="exception">Inner exception.</param>
        </member>
        <member name="M:DoFactory.Framework.Log.SingletonLogger.Error(System.String)">
            <summary>
            Log a message when severity level is "Error" or higher.
            </summary>
            <param name="message">Log message</param>
        </member>
        <member name="M:DoFactory.Framework.Log.SingletonLogger.Error(System.String,System.Exception)">
            <summary>
            Log a message when severity level is "Error" or higher.
            </summary>
            <param name="message">Log message.</param>
            <param name="exception">Inner exception.</param>
        </member>
        <member name="M:DoFactory.Framework.Log.SingletonLogger.Fatal(System.String)">
            <summary>
            Log a message when severity level is "Fatal"
            </summary>
            <param name="message">Log message</param>
        </member>
        <member name="M:DoFactory.Framework.Log.SingletonLogger.Fatal(System.String,System.Exception)">
            <summary>
            Log a message when severity level is "Fatal"
            </summary>
            <param name="message">Log message.</param>
            <param name="exception">Inner exception.</param>
        </member>
        <member name="M:DoFactory.Framework.Log.SingletonLogger.OnLog(DoFactory.Framework.Log.LogEventArgs)">
            <summary>
            Invoke the Log event.
            </summary>
            <param name="e">Log event parameters.</param>
        </member>
        <member name="M:DoFactory.Framework.Log.SingletonLogger.Attach(DoFactory.Framework.Log.ILog)">
            <summary>
            Attach a listening observer logging device to logger.
            </summary>
            <param name="observer">Observer (listening device).</param>
        </member>
        <member name="M:DoFactory.Framework.Log.SingletonLogger.Detach(DoFactory.Framework.Log.ILog)">
            <summary>
            Detach a listening observer logging device from logger.
            </summary>
            <param name="observer">Observer (listening device).</param>
        </member>
        <member name="E:DoFactory.Framework.Log.SingletonLogger.Log">
            <summary>
            The Log event.
            </summary>
        </member>
        <member name="P:DoFactory.Framework.Log.SingletonLogger.Instance">
            <summary>
            Gets the instance of the singleton logger object.
            </summary>
        </member>
        <member name="P:DoFactory.Framework.Log.SingletonLogger.Severity">
            <summary>
            Gets and sets the severity level of logging activity.
            </summary>
        </member>
        <member name="T:DoFactory.Framework.Log.SingletonLogger.LogEventHandler">
            <summary>
            Delegate event handler that hooks up requests.
            
            GoF Design Pattern: Observer, Singleton.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
            <remarks>
            The Observer Design Pattern allows Observer classes to attach itself to 
            this Logger class and be notified if certain events occur. 
            
            The Singleton Design Pattern allows the application to have just one
            place that is aware of the application-wide LogSeverity setting.
            </remarks>
        </member>
    </members>
</doc>
