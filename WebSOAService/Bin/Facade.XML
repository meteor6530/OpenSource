<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Facade</name>
    </assembly>
    <members>
        <member name="T:DoFactory.BusinessLayer.Facade.CustomerFacade">
            <summary>
            Facade (also called Service Layer) that controls all access to Customer, 
            Order, and Order Details related activities.
            
            Gof Design Patterns: Facade, Decorator, Proxy
            Enterprise Design Patterns: Remote Facade, LazyLoad, Service Layer, Transaction Script.
            </summary>
            <remarks>
            This Facade is not secure. In most applications each method in the 
            Facade should check for access security. This can be accomplished  
            either programmatically or declaratively (using Attributes). In addition,
            validation of arguments should also be added in each procedure.
            
            The DataObject and DataObjectMethod Attributes in this class tell the 
            Visual Studio 2005 Wizards which classes and methods are 
            appropriate for building the ObjectDataSource Web controls.
            
            The Proxy Pattern is used in accessing Orders and Order Details.
            
            The Decorator Pattern is used in bracketing database transactions with
            a decorated Transaction scope class. 
            
            The Remote Facade Design Pattern provides a course-grained facade on a 
            fine-grained objects. Indeed the methods are course-grained as they 
            deal with complete entities and/or entity lists rather than their individual 
            attributes.
            
            The Service Layer Design Pattern is the same as the Facade Design Pattern 
            except that Service Layer is more specific to Enterprise Business Applications 
            in that the layer sits on top of the Domain Model (which is the case here).
            
            The Transaction Script Design Pattern organizes business logic by procedures
            where each procedure handles a single request from the presentation.  This is 
            exactly how the Facade API has been modeled. They entirely handle individual
            requests (either from Web Application or Web Service).
            </remarks>
        </member>
        <member name="M:DoFactory.BusinessLayer.Facade.CustomerFacade.GetCustomers">
            <summary>
            Gets a list of customers.
            </summary>
            <returns>List of Customers.</returns>
        </member>
        <member name="M:DoFactory.BusinessLayer.Facade.CustomerFacade.GetCustomers(System.String)">
            <summary>
            Gets a list of customers in a given sort order.
            </summary>
            <param name="sortExpression">Sort order of the list</param>
            <returns>Sorted list of customers.</returns>
        </member>
        <member name="M:DoFactory.BusinessLayer.Facade.CustomerFacade.GetCustomersWithOrderStatistics(System.String)">
            <summary>
            Gets a list of customers with order summary statistics.
            </summary>
            <param name="sortExpression">Sort order of list.</param>
            <returns>Sorted list of customers with order statistics.</returns>
        </member>
        <member name="M:DoFactory.BusinessLayer.Facade.CustomerFacade.GetCustomer(System.Int32)">
            <summary>
            Get a specific customer.
            Uses the Proxy Design Pattern.
            </summary>
            <param name="customerId">Unique customer identifier.</param>
            <returns>Requested customer.</returns>
        </member>
        <member name="M:DoFactory.BusinessLayer.Facade.CustomerFacade.AddCustomer(DoFactory.BusinessLayer.BusinessObjects.Customer)">
            <summary>
            Adds a new customer
            Uses the Decorator Design Pattern.
            </summary>
            <param name="customer">New Customer.</param>
        </member>
        <member name="M:DoFactory.BusinessLayer.Facade.CustomerFacade.UpdateCustomer(DoFactory.BusinessLayer.BusinessObjects.Customer)">
            <summary>
            Updates a customer
            Uses the Decorator Design Pattern.
            </summary>
            <param name="customer">Customer to be updated.</param>
        </member>
        <member name="M:DoFactory.BusinessLayer.Facade.CustomerFacade.DeleteCustomer(System.Int32)">
            <summary>
            Deletes an existing customer.
            Uses the Decorator Design Pattern.
            </summary>
            <param name="customerId">Unique customer identifier.</param>
            <returns>Number of records deleted successfully.</returns>
        </member>
        <member name="M:DoFactory.BusinessLayer.Facade.CustomerFacade.GetOrder(System.Int32)">
            <summary>
            Gets order details for a given order.
            Uses the Proxy Design Pattern.
            </summary>
            <param name="orderId">Unique order identifier.</param>
            <returns>Order that was requested.</returns>
        </member>
        <member name="T:DoFactory.BusinessLayer.Facade.ProductFacade">
            <summary>
            Facade (also called Service Layer) that controls all access to Catalog, 
            Product, and Product Search related activities.  Note that the Shopping
            Cart activities are handled in the Presentation layer (i.e. code behind)
            and do not access the Facade. If you had a persistent Shopping Cart 
            then this Facade would need to accomodate that. 
            
            Gof Design Patterns: Facade.
            Enterprise Design Patterns: Remote Facade, Service Layer, Transaction Script.
            </summary>
            <remarks>
            This Facade is not secure. In most applications each method in the 
            Facade should check for access security. This can be accomplished  
            either programmatically or declaratively (using Attributes).In addition,
            validation of arguments should also be added in each procedure.
            
            The DataObject and DataObjectMethod Attributes in this class tell the 
            Visual Studio 2005 Wizards which classes and methods are 
            appropriate for building the ObjectDataSource Web controls.
            
            The Remote Facade Design Pattern provides a course-grained facade on a 
            fine-grained objects. Indeed the methods are course-grained as they 
            deal with complete entities and/or entity lists rather than their individual 
            attributes.
            
            The Service Layer Design Pattern is the same as the Facade Design Pattern 
            except that Service Layer is more specific to Enterprise Business Applications 
            in that the layer sits on top of the Domain Model (which is the case here).
            
            The Transaction Script Design Pattern organizes business logic by procedures
            where each procedure handles a single request from the presentation.  This is 
            exactly how the Facade API has been modeled. They entirely handle individual
            requests (either from Web Application or Web Service).
            </remarks>
        </member>
        <member name="M:DoFactory.BusinessLayer.Facade.ProductFacade.GetCategories">
            <summary>
            Gets a list of product categories.
            </summary>
            <returns>Category list.</returns>
        </member>
        <member name="M:DoFactory.BusinessLayer.Facade.ProductFacade.GetProductsByCategory(System.Int32)">
            <summary>
            Gets a list of products for a given category.
            </summary>
            <param name="categoryId">Unique category identifier.</param>
            <returns>Product list.</returns>
        </member>
        <member name="M:DoFactory.BusinessLayer.Facade.ProductFacade.GetProductsByCategory(System.Int32,System.String)">
            <summary>
            Gets a sorted list of products for a given category.
            </summary>
            <param name="categoryId">Unique category Identifier.</param>
            <param name="sortExpression">Sort expression.</param>
            <returns>Sorted list of products.</returns>
        </member>
        <member name="M:DoFactory.BusinessLayer.Facade.ProductFacade.GetProduct(System.Int32)">
            <summary>
            Gets product details.
            </summary>
            <param name="productId">Unique product identifier.</param>
            <returns>Product</returns>
        </member>
        <member name="M:DoFactory.BusinessLayer.Facade.ProductFacade.GetProductPriceRange">
            <summary>
            Gets a list of predefined price ranges.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DoFactory.BusinessLayer.Facade.ProductFacade.SearchProducts(System.String,System.Int32,System.String)">
            <summary>
            Search for products given certain criteria.
            </summary>
            <param name="productName">Product name criterium.</param>
            <param name="priceRangeId">Price range criterium.</param>
            <param name="sortExpression">Sort order of product list.</param>
            <returns>Product list that meets the criteria.</returns>
        </member>
        <member name="T:DoFactory.BusinessLayer.Facade.ProxyObjects.ProxyForOrderDetails`1">
            <summary>
            A proxy object representing a list of Order Details. The ProxyList abstract base 
            class implements lazy loading (also called just-in-time loading).  Therefore 
            the Order Detail list is loaded only when it is absolutely necessary.  This class
            is a proxy to a limited resource (the list coming from the database). 
            
            GoF Design Patterns: Proxy.
            Enterprise Design Patterns: LazyLoad.
            </summary>
        </member>
        <member name="M:DoFactory.BusinessLayer.Facade.ProxyObjects.ProxyForOrderDetails`1.#ctor(DoFactory.BusinessLayer.BusinessObjects.Order)">
            <summary>
            Constructor for ProxyForOrderDetails.
            </summary>
            <param name="order">Order.</param>
        </member>
        <member name="M:DoFactory.BusinessLayer.Facade.ProxyObjects.ProxyForOrderDetails`1.LoadList">
            <summary>
            Loads the order details associated with an order.
            </summary>
            <returns>Number of items loaded.</returns>
        </member>
        <member name="T:DoFactory.BusinessLayer.Facade.ProxyObjects.ProxyForOrders`1">
            <summary>
            A proxy object representing a list of Orders. The ProxyList abstract base 
            class implements lazy loading (also called just-in-time loading).  Therefore 
            the Order list is loaded only when it is absolutely necessary.  This class
            is a proxy to a limited resource (the list coming from the database). 
            
            GoF Design Patterns: Proxy.
            Enterprise Design Patterns: LazyLoad.
            </summary>
        </member>
        <member name="M:DoFactory.BusinessLayer.Facade.ProxyObjects.ProxyForOrders`1.#ctor(DoFactory.BusinessLayer.BusinessObjects.Customer)">
            <summary>
            Constructor for ProxyForOrders.
            </summary>
            <param name="customer">Customer.</param>
        </member>
        <member name="M:DoFactory.BusinessLayer.Facade.ProxyObjects.ProxyForOrders`1.LoadList">
            <summary>
            Loads the orders associated with a customer.
            </summary>
            <returns>Number of items loaded.</returns>
        </member>
        <member name="T:DoFactory.BusinessLayer.Facade.Utilities.PriceRange">
            <summary>
            A utility class holding a list of price ranges. The price ranges are  
            used in building search criteria for the product catalog. 
            </summary>
        </member>
        <member name="M:DoFactory.BusinessLayer.Facade.Utilities.PriceRange.#cctor">
            <summary>
            Static constructor for PriceRange.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.Facade.Utilities.PriceRange.List">
            <summary>
            Gets the list of price ranges.
            </summary>
        </member>
        <member name="T:DoFactory.BusinessLayer.Facade.Utilities.PriceRangeItem">
            <summary>
            A PriceRange item used in the PriceRange list.  PriceRanges are used for 
            searching the product catalog. 
            </summary>
        </member>
        <member name="M:DoFactory.BusinessLayer.Facade.Utilities.PriceRangeItem.#ctor(System.Int32,System.Double,System.Double,System.String)">
            <summary>
            Constructor for PriceRangeItem.
            </summary>
            <param name="rangeId">Unique identifier for the price range.</param>
            <param name="rangeFrom">Lower end of the price range.</param>
            <param name="rangeThru">Higher end of the price range.</param>
            <param name="rangeText">Easy-to-read form of the price range.</param>
        </member>
        <member name="P:DoFactory.BusinessLayer.Facade.Utilities.PriceRangeItem.RangeId">
            <summary>
            Gets the unique PriceRange identifier.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.Facade.Utilities.PriceRangeItem.RangeFrom">
            <summary>
            Gets the low end of the PriceRange item.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.Facade.Utilities.PriceRangeItem.RangeThru">
            <summary>
            Gets the high end of the PriceRange item.
            </summary>
        </member>
        <member name="P:DoFactory.BusinessLayer.Facade.Utilities.PriceRangeItem.RangeText">
            <summary>
            Gets an easy-to-read form of the PriceRange item.
            </summary>
        </member>
    </members>
</doc>
